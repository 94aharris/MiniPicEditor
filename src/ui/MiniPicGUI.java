package ui;

import imagehandlers.ImageObject;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import imagehandlers.ImagePool;
import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 * @author Anthony Harris
 * @repository https://github.com/94aharris/MiniPicEditor
 */

public class MiniPicGUI extends javax.swing.JFrame {
  
  ImagePool imagePool;
  int percentScale;
  int heightPx;
  int widthPx;
  boolean rescaleInterrupt;
  File saveLocation;
  
  
  public MiniPicGUI() {
    imagePool = new ImagePool();
    percentScale = 100;
    heightPx = 0;
    widthPx = 0;
    initComponents();
    rescaleInterrupt = false;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    photoScroll = new javax.swing.JScrollPane();
    photoList = new javax.swing.JList();
    saveLabel = new javax.swing.JLabel();
    saveTextField = new javax.swing.JTextField();
    savePathButton = new javax.swing.JButton();
    resizeSlider = new javax.swing.JSlider();
    resizeOptionsLabel = new javax.swing.JLabel();
    percLbl = new javax.swing.JLabel();
    widthLbl = new javax.swing.JLabel();
    heightLbl = new javax.swing.JLabel();
    percSigLbl = new javax.swing.JLabel();
    hgtPxLbl = new javax.swing.JLabel();
    wdtPxLbl = new javax.swing.JLabel();
    resizeBtn = new javax.swing.JButton();
    aspectRatioChkBox = new javax.swing.JCheckBox();
    percentSpinner = new javax.swing.JSpinner();
    importImagesBtn = new javax.swing.JButton();
    clearListBtn = new javax.swing.JButton();
    jDesktopPane1 = new javax.swing.JDesktopPane();
    hgtSpinner = new javax.swing.JSpinner();
    wdtSpinner = new javax.swing.JSpinner();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    previewPanel = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("MiniPic - LightWeight Photo Resize Tool");
    setBackground(java.awt.Color.lightGray);
    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    setForeground(java.awt.Color.lightGray);

    photoScroll.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

    photoList.setBorder(new javax.swing.border.MatteBorder(null));
    photoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        photoListValueChanged(evt);
      }
    });
    photoScroll.setViewportView(photoList);

    saveLabel.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
    saveLabel.setText("Save To");

    saveTextField.setEditable(false);
    saveTextField.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

    savePathButton.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    savePathButton.setText("...");
    savePathButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        savePathButtonActionPerformed(evt);
      }
    });

    resizeSlider.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    resizeSlider.setValue(percentScale);
    resizeSlider.setEnabled(false);
    resizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        resizeSliderStateChanged(evt);
      }
    });

    resizeOptionsLabel.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
    resizeOptionsLabel.setText("Resize Image Options");

    percLbl.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
    percLbl.setText("Percentage");

    widthLbl.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
    widthLbl.setText("Width");

    heightLbl.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
    heightLbl.setText("Height");

    percSigLbl.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    percSigLbl.setText("%");

    hgtPxLbl.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    hgtPxLbl.setText("px");

    wdtPxLbl.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    wdtPxLbl.setText("px");

    resizeBtn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    resizeBtn.setText("Resize");
    resizeBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        resizeBtnActionPerformed(evt);
      }
    });

    aspectRatioChkBox.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    aspectRatioChkBox.setSelected(true);
    aspectRatioChkBox.setText("Keep Aspect Ratio");
    aspectRatioChkBox.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        aspectRatioChkBoxStateChanged(evt);
      }
    });

    percentSpinner.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    percentSpinner.setEnabled(false);
    percentSpinner.setRequestFocusEnabled(false);
    percentSpinner.setValue(percentScale);
    percentSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        percentSpinnerStateChanged(evt);
      }
    });

    importImagesBtn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    importImagesBtn.setText("Import Images");
    importImagesBtn.setInheritsPopupMenu(true);
    importImagesBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        importImagesBtnActionPerformed(evt);
      }
    });

    clearListBtn.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    clearListBtn.setText("Clear Images");
    clearListBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearListBtnActionPerformed(evt);
      }
    });

    hgtSpinner.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    hgtSpinner.setEnabled(false);
    hgtSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        hgtSpinnerStateChanged(evt);
      }
    });

    wdtSpinner.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
    wdtSpinner.setEnabled(false);
    wdtSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        wdtSpinnerStateChanged(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
    jLabel1.setText("Imported Images");

    jLabel2.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
    jLabel2.setText("Image Import / Export");

    previewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
    previewPanel.setLayout(previewPanelLayout);
    previewPanelLayout.setHorizontalGroup(
      previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 236, Short.MAX_VALUE)
    );
    previewPanelLayout.setVerticalGroup(
      previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(photoScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jLabel1)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(resizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(heightLbl)
              .addComponent(percLbl)
              .addComponent(widthLbl))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(percentSpinner)
              .addComponent(hgtSpinner)
              .addComponent(wdtSpinner))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(hgtPxLbl)
              .addComponent(wdtPxLbl)
              .addComponent(percSigLbl))
            .addGap(36, 36, 36))
          .addGroup(layout.createSequentialGroup()
            .addComponent(saveLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(saveTextField)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(savePathButton))
          .addGroup(layout.createSequentialGroup()
            .addComponent(importImagesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(clearListBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(aspectRatioChkBox)
            .addGap(30, 30, 30)
            .addComponent(resizeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(resizeOptionsLabel)
              .addComponent(jLabel2))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 163, Short.MAX_VALUE)
            .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(13, 13, 13)
            .addComponent(jLabel1)
            .addGap(8, 8, 8)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(photoScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(previewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(resizeOptionsLabel)
            .addGap(8, 8, 8)
            .addComponent(resizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(percSigLbl)
                .addComponent(percLbl))
              .addComponent(percentSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(heightLbl)
                  .addComponent(hgtPxLbl))
                .addGap(16, 16, 16))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(hgtSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(wdtPxLbl)
                .addComponent(widthLbl))
              .addComponent(wdtSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(30, 30, 30)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(aspectRatioChkBox)
              .addComponent(resizeBtn))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(importImagesBtn)
              .addComponent(clearListBtn))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(saveLabel)
              .addComponent(saveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(savePathButton))))
        .addGap(33, 33, 33))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void savePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePathButtonActionPerformed
    JFileChooser folderChooser;
    if (saveTextField.equals("")) {
      folderChooser = new JFileChooser(".");
    }
    else {
      folderChooser = new JFileChooser(saveTextField.getText());
    }
    folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    folderChooser.setAcceptAllFileFilterUsed(false);
    int result = folderChooser.showOpenDialog(folderChooser);
    if (result == JFileChooser.APPROVE_OPTION) {
      saveTextField.setText(folderChooser.getSelectedFile().getPath());
      saveLocation = folderChooser.getSelectedFile();
    }
  }//GEN-LAST:event_savePathButtonActionPerformed

  private void importImagesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importImagesBtnActionPerformed
    JFileChooser fileChooser = new JFileChooser(".");
    fileChooser.setMultiSelectionEnabled(true);
    FileFilter imageFilter = new FileNameExtensionFilter("Image Files", ImageIO.getReaderFileSuffixes());
    fileChooser.addChoosableFileFilter(imageFilter);
    fileChooser.setAcceptAllFileFilterUsed(false);
    
    int result = fileChooser.showOpenDialog(fileChooser);
    if (result == JFileChooser.APPROVE_OPTION) {
      sizingEnabled(true);
      File [] selectedFiles = fileChooser.getSelectedFiles();
      try(Scanner sc = new Scanner(selectedFiles[0])) {
        imagePool.addImage(selectedFiles);
        photoList.setModel(new javax.swing.AbstractListModel () {
          ImageObject[] imageListArray = imagePool.getImages().toArray(new ImageObject [imagePool.getImages().size()]);
          public int getSize() { return imageListArray.length; }
          public Object getElementAt(int i) { return imageListArray[i]; }          
        });
        if (saveTextField.getText().equals("")) {
          saveTextField.setText(selectedFiles[0].getParent());
          saveLocation = selectedFiles[0].getParentFile();
        }
      }  catch (FileNotFoundException e) {
        JOptionPane.showMessageDialog(null, "Image can not be opened", "File Open Error", JOptionPane.ERROR_MESSAGE);
      } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Image can not be opened", "File Open Error", JOptionPane.ERROR_MESSAGE);
      } catch (NullPointerException e) {
        JOptionPane.showMessageDialog(null, "Error Pointing to File", "Image Open Error", JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_importImagesBtnActionPerformed

  private void clearListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListBtnActionPerformed
    imagePool = new ImagePool();
    photoList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = {};
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    heightPx = 0;
    widthPx = 0;
    wdtSpinner.setValue(widthPx);
    hgtSpinner.setValue(heightPx);
    sizingEnabled(false);
  }//GEN-LAST:event_clearListBtnActionPerformed

  private void resizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resizeSliderStateChanged
    percentScale = resizeSlider.getValue();
    percentSpinner.setValue(percentScale);
    
    if (photoList.getSelectedIndices().length == 1 && !rescaleInterrupt) {
      ImageObject selectedImage = (ImageObject) photoList.getSelectedValue();
      heightPx = (selectedImage.getHeight() * percentScale) / 100;
      widthPx = (selectedImage.getWidth() * percentScale) / 100;
      hgtSpinner.setValue(heightPx);
      wdtSpinner.setValue(widthPx);
    }
  }//GEN-LAST:event_resizeSliderStateChanged

  private void photoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_photoListValueChanged
    resizeSlider.setValue(100);
    percentSpinner.setValue(100);
    
    int [] selectedImages = photoList.getSelectedIndices();
    if (selectedImages.length > 1) {
      aspectRatioChkBox.getModel().setSelected(true);
      aspectRatioChkBox.getModel().setEnabled(false);
      hgtSpinner.setEnabled(false);
      wdtSpinner.setEnabled(false);
    }
    else if (selectedImages.length == 1) 
    {
      ImageObject selectedImage = (ImageObject)photoList.getSelectedValue();
      aspectRatioChkBox.getModel().setEnabled(true);
      aspectRatioChkBox.getModel().setPressed(true);
      hgtSpinner.setEnabled(true);
      hgtSpinner.setValue(selectedImage.getHeight());
      wdtSpinner.setEnabled(true);
      wdtSpinner.setValue(selectedImage.getWidth());
      
      // Trying to get the image to preview here
      ImageIcon previewImage = new ImageIcon(selectedImage.getImage());
      JLabel previewLabel = new JLabel("", previewImage, JLabel.CENTER);
      previewPanel.add( previewLabel, BorderLayout.CENTER);
    }
    
  }//GEN-LAST:event_photoListValueChanged

  private void percentSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentSpinnerStateChanged
    if (rescaleInterrupt) {
      return;
    }
    
    rescaleInterrupt = true;
    if ((int)percentSpinner.getModel().getValue() < 100 && (int)percentSpinner.getModel().getValue() > 0) {
      percentScale = (int)percentSpinner.getModel().getValue();  
    }
    percentSpinner.setValue((int)percentScale);
    resizeSlider.setValue((int)percentScale);
    
    if (photoList.getSelectedIndices().length == 1) {
      ImageObject selectedImage = (ImageObject) photoList.getSelectedValue();
      heightPx = (selectedImage.getHeight() * percentScale) / 100;
      widthPx = (selectedImage.getWidth() * percentScale) / 100;
      hgtSpinner.setValue(heightPx);
      wdtSpinner.setValue(widthPx);
    }
    rescaleInterrupt = false;
  }//GEN-LAST:event_percentSpinnerStateChanged
  
  private void aspectRatioChkBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aspectRatioChkBoxStateChanged
    resizeSlider.setEnabled(aspectRatioChkBox.getModel().isSelected());
    percentSpinner.setEnabled(aspectRatioChkBox.getModel().isSelected());
  }//GEN-LAST:event_aspectRatioChkBoxStateChanged

  private void resizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeBtnActionPerformed
    if (photoList.getSelectedIndices().length == 0) {
      JOptionPane.showMessageDialog(null, "Please Select A Photo", "Error", JOptionPane.ERROR_MESSAGE);
    }
    for (Object item : photoList.getSelectedValuesList()) {
      BufferedImage newBimg = ((ImageObject)item).getImage();
      BufferedImage resizeImage;
      if (photoList.getSelectedIndices().length == 1) {
        resizeImage = imagePool.resizeImage(newBimg, widthPx, heightPx);
      }
      else {
        resizeImage = imagePool.resizeImage(newBimg, percentScale);
      }
      try {
        imagePool.saveImage(resizeImage, saveLocation.getPath(), ((ImageObject)item).toString());
        JOptionPane.showMessageDialog(null, "Sucessfully Resized and Saved", "Success", JOptionPane.PLAIN_MESSAGE);
      } catch (NullPointerException e) {
        JOptionPane.showMessageDialog(null, "Invalid save file location", "File Save Error", JOptionPane.ERROR_MESSAGE);
      }  
    }
  }//GEN-LAST:event_resizeBtnActionPerformed

  private void hgtSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hgtSpinnerStateChanged
    if (rescaleInterrupt) {
      return;
    }
    if ((int)hgtSpinner.getValue() < 1 || photoList.getSelectedIndices().length != 1) {
      hgtSpinner.setValue(heightPx);
      return;
    }
    
    heightPx = (int)hgtSpinner.getValue();
    if (aspectRatioChkBox.isSelected()) {
      ImageObject selectedImage = (ImageObject)photoList.getSelectedValue();
      rescaleInterrupt = true;
      percentSpinner.setValue((heightPx * 100) / selectedImage.getHeight());
      resizeSlider.setValue((int)percentSpinner.getValue());
      widthPx = (selectedImage.getWidth() * heightPx) / selectedImage.getHeight();
      wdtSpinner.setValue(widthPx);
      rescaleInterrupt = false;
    }
  }//GEN-LAST:event_hgtSpinnerStateChanged

  private void wdtSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wdtSpinnerStateChanged
    if (rescaleInterrupt) {
      return;
    }
    
    if ((int)wdtSpinner.getValue() < 1 || photoList.getSelectedIndices().length != 1) {
      wdtSpinner.setValue(widthPx);
      return;
    }
    
    widthPx = (int)wdtSpinner.getValue();
    if (aspectRatioChkBox.isSelected()) {
      ImageObject selectedImage = (ImageObject)photoList.getSelectedValue();
      rescaleInterrupt = true;
      percentSpinner.setValue((widthPx * 100) / selectedImage.getWidth());
      resizeSlider.setValue((int)percentSpinner.getValue());
      heightPx = (selectedImage.getHeight() * widthPx) / selectedImage.getWidth();
      hgtSpinner.setValue(heightPx);
      rescaleInterrupt = false;
    }
  }//GEN-LAST:event_wdtSpinnerStateChanged
  private void sizingEnabled(boolean option) {
    wdtSpinner.setEnabled(option);
    hgtSpinner.setEnabled(option);
    resizeSlider.setEnabled(option);
    percentSpinner.setEnabled(option);
  }
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MiniPicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MiniPicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MiniPicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MiniPicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new MiniPicGUI().setVisible(true);
      }
    });
  }
  

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox aspectRatioChkBox;
  private javax.swing.JButton clearListBtn;
  private javax.swing.JLabel heightLbl;
  private javax.swing.JLabel hgtPxLbl;
  private javax.swing.JSpinner hgtSpinner;
  private javax.swing.JButton importImagesBtn;
  private javax.swing.JDesktopPane jDesktopPane1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel percLbl;
  private javax.swing.JLabel percSigLbl;
  private javax.swing.JSpinner percentSpinner;
  private javax.swing.JList photoList;
  private javax.swing.JScrollPane photoScroll;
  private javax.swing.JPanel previewPanel;
  private javax.swing.JButton resizeBtn;
  private javax.swing.JLabel resizeOptionsLabel;
  private javax.swing.JSlider resizeSlider;
  private javax.swing.JLabel saveLabel;
  private javax.swing.JButton savePathButton;
  private javax.swing.JTextField saveTextField;
  private javax.swing.JLabel wdtPxLbl;
  private javax.swing.JSpinner wdtSpinner;
  private javax.swing.JLabel widthLbl;
  // End of variables declaration//GEN-END:variables
}
